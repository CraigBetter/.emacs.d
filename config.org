#+TITLE: Emacs Configuration
#+AUTHOR: Craig Best
* set variables to preserve sanity
TODO: split this up into sections
#+begin_src emacs-lisp :tangle yes
(setq make-backup-files nil) ; stop creating backup~ files, link: http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
(setq auto-save-default nil) ; stop creating #autosave# files

(setq auto-save-default nil) ;; sanity
(savehist-mode 0)  ;; sanity

(setq inhibit-splash-screen 1)
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)

(global-display-line-numbers-mode)
;(setq display-line-numbers 'relative)

;(global-unset-key (kbd "C-x C-c"))

;(setq gc-cons-threshold 100000000)

; https://emacs.stackexchange.com/questions/22499/how-can-i-tell-emacs-to-always-open-help-buffers-in-the-current-window
; open help windows in buffer they were invoked from
;; (add-to-list 'display-buffer-alist
;;              '("*Help*" display-buffer-same-window))

;; make cursor blink forever in GUI
(setq blink-cursor-blinks 0)

;; for some bullshit reason C-, doesn't register in a tty or in the kitty terminal
;; and a cursory googling reveals no results. GET TO THE BOTTOM OF THIS!!!!
(define-key org-mode-map (kbd "C-c C-,") nil)
(define-key org-mode-map (kbd "C-c ,") 'org-insert-structure-template)

; taken from: https://gitlab.haskell.org/ghc/ghc/-/wikis/emacs
(setq-default indent-tabs-mode nil)
#+end_src

* set up melpa
  #+begin_src emacs-lisp :tangle yes
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
  (when (not package-archive-contents)
      (package-refresh-contents))
  #+end_src

* use-package
#+begin_src emacs-lisp :tangle yes
;;(package-install 'use-package)
(if (not (package-installed-p 'use-package))
	 (package-install 'use-package))
#+end_src

* evil-mode
  link for :init code https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
  ^that solves the problem where org-cycle is not bound to tab in evil-mode in a terminal
  #+begin_src emacs-lisp :tangle yes
  (use-package evil
    :ensure t
    :init   ;; run before loading evil-mode
    (setq evil-want-C-i-jump nil) ;; this doesn't work the first time
                                  ;; emacs is run, ie when emacs downloads this package
    (setq evil-want-C-u-scroll t)
    :config ;; run after loading evil-mode
    (evil-mode 1))
  #+end_src
* theme
  make background colorless when in terminal
  https://stackoverflow.com/questions/19054228/emacs-disable-theme-background-color-in-terminal
  #+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
  :ensure t
  :config (load-theme 'doom-Iosvkem t)
  (unless (display-graphic-p)
    (set-face-background 'default "unspecified-bg")))
  #+end_src
  + errors
    Warning (bytecomp): the following functions are not known to be defined:
        all-the-icons-dir-is-submodule, all-the-icons-octicon,
        all-the-icons-octicon-family, all-the-icons-icon-for-file,
        all-the-icons-fileicon, neo-path--file-short-name,
        neo-vc-for-node, neo-buffer--insert-fold-symbol,
        neo-buffer--node-list-set, neo-buffer--newline-and-begin,
        neo-global--select-window, neo-buffer--insert-file-entry,
        neo-buffer--insert-dir-entry, neo-buffer--insert-root-entry
* completion
** icomplete-vertical
   #+begin_src emacs-lisp :tangle yes
   (use-package icomplete-vertical
     :ensure t
     :demand t
     :custom
     (completion-styles '(partial-completion substring))
     (completion-category-overrides '((file (styles basic substring))))
     (read-file-name-completion-ignore-case t)
     (read-buffer-completion-ignore-case t)
     (completion-ignore-case t)
     :config
     (icomplete-mode)
     (icomplete-vertical-mode)
     :bind (:map icomplete-minibuffer-map
                 ("<down>" . icomplete-forward-completions)
                 ("C-n" . icomplete-forward-completions)
                 ("<up>" . icomplete-backward-completions)
                 ("C-p" . icomplete-backward-completions)
                 ("C-v" . icomplete-vertical-toggle)))
  #+end_src
** Ido
   #+begin_src emacs-lisp :tangle no
   (ido-mode)
   #+end_src
** orderless
   links: https://www.reddit.com/r/emacs/comments/g6ocid/orderless_a_completion_style_that_matches/
          https://github.com/oantolin/orderless
   #+begin_src emacs-lisp :tangle yes
   (use-package orderless
     :ensure t
     :init (icomplete-mode) ; optional but recommended!
     :custom (completion-styles '(orderless)))
   #+end_src
** TODO which-key
** TODO selectrum?
** TODO live-completions?
   + links: 
     https://www.reddit.com/r/emacs/comments/geqgmy/ann_new_package_livecompletions_a_simple/
     https://github.com/oantolin/live-completions
** TODO LSP?
   + links:
     https://www.youtube.com/watch?v=SIzQ0snQJEo
* TODO mode-line
  + links:
    https://github.com/maavelar5/dotemacs/blob/master/.emacs.d/marco-mode.el#L367

