#+TITLE: Emacs Configuration
#+AUTHOR: Craig Best
* Set up Melpa
  #+begin_src emacs-lisp :tangle yes
;TODO 'C-S-h', org-mode, and 'M-!' don't work in tty, make word objects work the same way they do in vim? Ivy completion doen't work in terminal.
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
  #+end_src

* restarting emacs
  #+begin_src emacs-lisp :tangle yes
(defun launch-separate-emacs-in-terminal () ; https://emacs.stackexchange.com/questions/5428/restart-emacs-from-within-emacs
  (suspend-emacs "fg ; emacs -nw"))
(defun launch-separate-emacs-under-x ()
  (call-process "sh" nil nil nil "-c" "emacs &"))
(defun restart-emacs ()
  (interactive)
  ;; We need the new emacs to be spawned after all kill-emacs-hooks
  ;; have been processed and there is nothing interesting left
  (let ((kill-emacs-hook (append kill-emacs-hook (list (if (display-graphic-p)
							   #'launch-separate-emacs-under-x
							   #'launch-separate-emacs-in-terminal)))))
    (save-buffers-kill-emacs)))
  #+end_src

* install missing packages and restart
#+begin_src emacs-lisp :tangle yes
; install the missing packages
;(package-refresh-contents)
;(when (require 'use-package nil 'noerror)
;  (package-install 'use-package))
;(package-install 'use-package)
(setq package-list
      '(evil evil-collection evil-numbers evil-leader evil-commentary
	telephone-line ivy eyebrowse geiser use-package gruvbox-theme
	counsel lua-mode helm helm-projectile which-key evil-space
	vimish-fold evil-vimish-fold slime evil-lion 
	doom-modeline doom-themes arduino-mode scad-mode company jedi
	hy-mode origami vterm xclip ivy-rich ivy-explorer go-mode
	evil-god-state evil-org org-roam))
; constant-theme 
(let ((restart nil))
  (progn
    (dolist (package package-list)
      (if (not (package-installed-p package)) ; It works, I did it!
	  (progn (package-refresh-contents) ; https://emacs.stackexchange.com/questions/39250/error-package-use-package-is-unavailable
		 (package-install package)
		 (setq restart t))))
    (if restart (restart-emacs)))) ; WARNING: this avoids problems with bytecompile warnings, and evil initialization order, but also stops me from seeing warnings and such
#+end_src

* require use-package
#+begin_src emacs-lisp :tangle yes
;; This is only needed once, near the top of the file
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "~/.emacs.d/elpa/")
  (require 'use-package))
#+end_src

* random reddit link regarding installing packages on startup
; https://www.reddit.com/r/emacs/comments/4fqu0a/automatically_install_packages_on_startup/
; list the packages you want
;(setq package-list '(evil evil-collection evil-numbers evil-leader evil-commentary telephone-line ivy constant-theme eyebrowse))
* set variables to preserve sanity
#+begin_src emacs-lisp :tangle yes
(setq make-backup-files nil) ; stop creating backup~ files, link: http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
(setq auto-save-default nil) ; stop creating #autosave# files

(setq auto-save-default nil) ;; sanity
(savehist-mode 0)  ;; sanity

(setq inhibit-splash-screen 1)
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)

(global-display-line-numbers-mode)
;(setq display-line-numbers 'relative)

(global-unset-key (kbd "C-x C-c"))

(setq gc-cons-threshold 100000000)

; https://emacs.stackexchange.com/questions/22499/how-can-i-tell-emacs-to-always-open-help-buffers-in-the-current-window
; open help windows in buffer they were invoked from
;; (add-to-list 'display-buffer-alist
;;              '("*Help*" display-buffer-same-window))

;; make cursor blink forever in GUI
(setq blink-cursor-blinks 0)
#+end_src

* evil setup
** initial stuff
#+begin_src emacs-lisp :tangle yes
(setq evil-want-keybinding nil)   ;Warning (evil-collection): Make sure to set `evil-want-keybinding' to nil before loading evil or evil-collection.
(setq evil-want-C-i-jump nil)     ;make tab work with evil and org mode in terminal. Taken from; https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump nil) ; make tab work with evil and org mode in terminal. Taken from; https://stackoverflow.com/questions/22878668/emacs-org-mode-evil-mode-tab-key-not-working
(use-package evil)			  ;See https://github.com/emacs-evil/evil-collection/issues/60 for more details.
(use-package evil-collection)
(evil-collection-init)
(evil-mode 1)
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up) ;;sanity
(define-key evil-normal-state-map (kbd "C-i") 'evil-jump-forward) ;;why was this not bound by default?
(use-package evil-commentary)
(evil-commentary-mode 1)
(use-package evil-leader)
(global-evil-leader-mode)
(evil-leader/set-key
  "n" 'notes-menu
  "x b" 'ivy-switch-buffer
  "r" 'eval-region)
(use-package evil-numbers)
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-visual-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt)
(define-key evil-visual-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt)
(define-key evil-normal-state-map (kbd "C-S-h") 'evil-window-left)
(define-key evil-normal-state-map (kbd "C-S-j") 'evil-window-down)
(define-key evil-normal-state-map (kbd "C-S-k") 'evil-window-up)
(define-key evil-normal-state-map (kbd "C-S-l") 'evil-window-right)
(define-key evil-normal-state-map (kbd "<f9>") 'compile)
(define-key evil-normal-state-map (kbd "<f10>") '(lambda () (interactive) (progn (save-buffer) (compile "make"))))
(setq sentence-end-double-space nil) ; from: https://emacs.stackexchange.com/questions/14358/how-do-i-jump-to-the-next-sentence-in-evil
;; (define-key org-mode-map evil-normal-state-map (kbd "<tab>") 'org-cycle) ;how do I do this?
#+end_src
** fix evil search
https://emacs.stackexchange.com/questions/31334/history-of-search-terms-for-evil-mode
the final solution was in the comment in the following link:
https://stackoverflow.com/questions/25768036/emacs-evil-non-incremental-search-and-persistent-highlighting/34252236#34252236
#+begin_src emacs-lisp :tangle yes
;(setq-default evil-search-module 'evil-search)
(evil-select-search-module 'evil-search-module 'evil-search) ;more evil
(evil-select-search-module 'evil-search-module 'isearch)     ;less evil
#+end_src

** evil-lion
#+begin_src emacs-lisp :tangle yes
(use-package evil-lion
  :ensure t
  :config
  (evil-lion-mode))
#+end_src

** evil-org
   this is confusing me, don't tangle for now
#+begin_src emacs-lisp :tangle no
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** vimish-folds
   https://github.com/seregaxvm/vimish-fold
preliminary stuff   
#+begin_src emacs-lisp :tangle yes
(use-package vimish-fold)
(define-key evil-normal-state-map (kbd "z f") 'vimish-fold-unfold)
;(define-key evil-normal-state-map (kbd "z f") 'vimish-fold)
(define-key evil-visual-state-map (kbd "z f") 'vimish-fold)
(define-key evil-normal-state-map (kbd "z d") 'vimish-fold-delete)
#+end_src
   
* set scroll variables
#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 7)
(setq scroll-conservatively 1)
#+end_src

* Helm
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;; HELM!!! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package helm ;; taken from: https://emacs.stackexchange.com/questions/34277/best-practice-for-emacs-helm-setup-after-use-package-verse
 ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
 ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
 ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
 :demand t
 :bind (("M-x" . helm-M-x)
    ("C-c h o" . helm-occur)
    ("<f1> SPC" . helm-all-mark-rings) ; I modified the keybinding 
    ("M-y" . helm-show-kill-ring)
    ("C-c h x" . helm-register)    ; C-x r SPC and C-x r j
    ("C-c h g" . helm-google-suggest)
    ("C-c h M-:" . helm-eval-expression-with-eldoc)
    ("C-x C-f" . helm-find-files)
    ("C-x b" . helm-mini)      ; *<major-mode> or /<dir> or !/<dir-not-desired> or @<regexp>
    
    
    :map helm-map
    ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
    ("C-i" . helm-execute-persistent-action) ; make TAB works in terminal
    ("C-z" . helm-select-action) ; list actions using C-z
    ("C-j" . helm-next-line)	  ; (define-key helm-map (kbd "C-j") 'helm-next-line)     taken from:
    ("C-k" . helm-previous-line)  ; (define-key helm-map (kbd "C-k") 'helm-previous-line) https://emacs.stackexchange.com/questions/18861/helm-bind-c-j-and-c-k-to-list-navigation-cursor-position
    :map shell-mode-map
    ("C-c C-l" . helm-comint-input-ring) ; in shell mode
    :map minibuffer-local-map
    ("C-c C-l" . helm-minibuffer-history))
 :init
 (setq helm-command-prefix-key "C-c h"))
(use-package helm-config) ;; what even is this?
(use-package helm-projectile)

;; taken from: http://lotabout.me/orgwiki/emacs-helm.html
;; (when (package-installed-p 'helm)
;;   ;; change default prefix key
;;   (global-set-key (kbd "C-c h") 'helm-command-prefix)

;;   ;; helm-M-x
;;   (setq helm-M-x-fuzzy-match t)
;;   (global-set-key (kbd "M-x") 'helm-M-x)

;;   ;; helm-kill-ring
;;   (global-set-key (kbd "M-y") 'helm-show-kill-ring)

;;   ;; helm-mini
;;   (global-set-key (kbd "C-x b") 'helm-mini)
;;   (setq helm-buffers-fuzzy-matching t
;;         helm-recentf-fuzzy-match t)

;;   ;; helm-find-files
;;   (global-set-key (kbd "C-x C-f") 'helm-find-files)
;;   )

;; ;;; -----------------------------
;; ;;; helm-projectile
;; (when (package-installed-p 'helm-projectile)
;;   (projectile-global-mode)
;;   (helm-projectile-on)
;;   )
;;;;;;;;;;;;;;;;;;;;;;;;;;;; AAAAAAAAAAAHHHHHHHH!!! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;; secondary helm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; taken from: http://tuhdo.github.io/helm-intro.html
;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

(defun spacemacs//helm-hide-minibuffer-maybe ()
  "Hide minibuffer in Helm session if we use the header line as input field."
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)
#+end_src

* which-key
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;; AAAAAAAAAAAHHHHHHHH!!! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package which-key     ; IT'S FINALLY ANSWERED, WHY WAS THAT SO HARD TO FIND?!?!?!????????????!!?!?!?!
  :diminish
  :custom
  (which-key-separator " ")
  (which-key-prefix-prefix "+")
  :config
  (which-key-mode))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

* ivy
;; (use-package ivy)
;; (define-key ivy-switch-buffer-map (kbd "C-k") nil)                         ;; unbind ivy-switch-buffer-kill
;; (define-key ivy-switch-buffer-map (kbd "C-S-k") 'ivy-switch-buffer-kill)   ;; rebind ivy-switch-buffer-kill
;; (define-key ivy-minibuffer-map (kbd "C-j") 'next-line)                     ;; this works for some reason
;; (define-key ivy-minibuffer-map (kbd "C-k") 'previous-line)                 ;; see line 301, 302 of ivy.el for reasoning
;; (define-key ivy-switch-buffer-map (kbd "C-k") 'previous-line)              ;; for some reason this has to be bound in both keymaps after rebinding ivy-switch-buffer-kill
;; (ivy-mode 1)
* counsel
#+begin_src emacs-lisp :tangle yes
(use-package counsel)
(counsel-mode 1)
#+end_src

* notes-menu
#+begin_src emacs-lisp :tangle yes
(defun notes-menu ()
  "This function is meant to replace the myriad functions I
previously had for accessing my notes and config files"
  (interactive)
  (find-file (ivy-read "bookmark files: " notes-list)))

(setq notes-list '("~/../notes.org"
                   "~/Documents/notes/bookmarks.org"
                   "~/Documents/notes/qutebrowser.org"
                   "~/Documents/notes/awesome.org"
                   "~/Documents/notes/openSCAD.org"
                   "~/Documents/notes/CommonLisp.org"
                   "~/Documents/notes/Python.org"
                   "~/Documents/notes/MATELLog.org"
                   "~/Documents/notes/EmacsLog.org"
                   "~/.emacs.d/mylisp/defaults.el"
                   "~/Documents/notes/ClusterLog.org"
                   "~/Documents/notes/BashLog.org"
                   "~/Documents/notes/Todo.org"
                   "~/Documents/notes/Log.org"
                   "~/.emacs.d/notes-menu.org"
                   "~/.emacs.d/init.el"
                   "~/.emacs.d/config.org"
                   "~/Documents/lisp/clojure/test.clj"
                   "~/Documents/notes/c-notes.org"
		   "~/Documents/notes/javascript.org"
		   "~/Documents/notes/macro.org"))
#+end_src

* appearance
** theme
#+begin_src emacs-lisp :tangle yes
;(load-theme 'doom-dark+ t)
(load-theme 'doom-Iosvkem t)
#+end_src

;(use-package gruvbox-theme)
;(load-theme 'gruvbox-dark-hard t)
;; (use-package constant-theme)
;; (load-theme 'constant t)
;; (use-package snazzy-theme)
;; (load-theme 'snazzy t)
;(use-package soothe-theme)
;(load-theme 'soothe t)

** modeline
#+begin_src emacs-lisp :tangle no
(doom-modeline-mode)
(setq doom-modeline-height 15)
  ;; (use-package telephone-line)
  ;; (telephone-line-mode)
#+end_src

* geiser
#+begin_src emacs-lisp :tangle yes
(use-package geiser)
(setq geiser-chicken-binary "chicken-csi") ;; this is neccesary in arch-based distros
#+end_src

* sarcasm
#+begin_src emacs-lisp :tangle yes
;;---------- sarcasm -----------------------------------------
(progn
  (defun sarcasify-line ()
    (interactive)
    (let ((line-size (- (line-end-position) (line-beginning-position))) ; size of line
	  (count 1))
      (save-excursion
	(beginning-of-line)
	(forward-char)
	(while (< count line-size)
	  (progn (evil-invert-case (point) (1+ (point)))
		 (forward-char 3)
		 (setq count (+ count 3)))))))
  (evil-leader/set-key "x s" 'sarcasify-line))
#+end_src

* eyebrowse
#+begin_src emacs-lisp :tangle yes
;;------- some eyebrowse bindings -------------------------------------
(use-package eyebrowse)  ;; <- I don't need this?
(define-key evil-normal-state-map (kbd "g 0") 'eyebrowse-switch-to-window-config-0) ;; maybe also do this for visual state?
(define-key evil-normal-state-map (kbd "g 1") 'eyebrowse-switch-to-window-config-1)
(define-key evil-normal-state-map (kbd "g 2") 'eyebrowse-switch-to-window-config-2)
(define-key evil-normal-state-map (kbd "g 3") 'eyebrowse-switch-to-window-config-3)
(define-key evil-normal-state-map (kbd "g 4") 'eyebrowse-switch-to-window-config-4)
(define-key evil-normal-state-map (kbd "g 5") 'eyebrowse-switch-to-window-config-5)
(define-key evil-normal-state-map (kbd "g 6") 'eyebrowse-switch-to-window-config-6)
(define-key evil-normal-state-map (kbd "g 7") 'eyebrowse-switch-to-window-config-7)
(define-key evil-normal-state-map (kbd "g 8") 'eyebrowse-switch-to-window-config-8)
(define-key evil-normal-state-map (kbd "g 9") 'eyebrowse-switch-to-window-config-9)
(setq eyebrowse-new-workspace t)
(eyebrowse-mode)
#+end_src

;; (define-key evil-normal-state-map (kbd "g 0") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-0) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 1") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-1) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 2") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-2) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 3") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-3) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 4") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-4) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 5") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-5) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 6") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-6) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 7") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-7) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 8") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-8) (delete-other-windows) (switch-to-buffer "scritch"))))
;; (define-key evil-normal-state-map (kbd "g 9") '(lambda () (interactive) (progn (eyebrowse-switch-to-window-config-9) (delete-other-windows) (switch-to-buffer "scritch"))))

* essh
#+begin_src emacs-lisp :tangle yes
;; here is essh stuff
;; (use-package essh)
(load-file "~/.emacs.d/essh.el")
(defun essh-sh-hook ()
  (define-key sh-mode-map "\C-c\C-r" 'pipe-region-to-shell)
  (define-key sh-mode-map "\C-c\C-b" 'pipe-buffer-to-shell)
  (define-key sh-mode-map "\C-c\C-j" 'pipe-line-to-shell)
  (define-key sh-mode-map "\C-c\C-n" 'pipe-line-to-shell-and-step)
  (define-key sh-mode-map "\C-c\C-f" 'pipe-function-to-shell)
  (define-key sh-mode-map "\C-c\C-d" 'shell-cd-current-directory))
(add-hook 'sh-mode-hook 'essh-sh-hook)
#+end_src

* eshell completion
#+begin_src emacs-lisp :tangle yes
;; this replaces eshell's weird native tab completion with ivy's tab completion
(add-hook 'eshell-mode-hook  ; https://emacs.stackexchange.com/questions/27849/how-can-i-setup-eshell-to-use-ivy-for-tab-completion
  (lambda () 
    (define-key eshell-mode-map (kbd "<tab>")
      (lambda () (interactive) (pcomplete-std-complete)))))
#+end_src

* toggle-maximize-buffer
#+begin_src emacs-lisp :tangle yes
(defun toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
    (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))
;; Bind it to a key.
;; (global-set-key [(super shift return)] 'toggle-maximize-buffer) 
(evil-leader/set-key "m" 'toggle-maximize-buffer)
#+end_src

* put things between strings :format:
** format things for this org-file
 #+begin_src emacs-lisp :tangle yes
 (defun format-it ()
   (interactive)
   (if (region-active-p)
       (let ((up-string "#+begin_src emacs-lisp :tangle yes\n")
	     (down-string "\n#+end_src\n")
	     (BEG (region-beginning))
	     (END (region-end)))
	 (kill-region BEG END)
	 (insert up-string)
	 (yank)
	 (insert down-string))
     (print "you didn't highlight anything")))
 #+end_src

** code formating for tex files
#+begin_src emacs-lisp :tangle yes
(defun format-tex ()
  (interactive)
  (if (region-active-p)
      (let ((start-string "\\begin{verbatim}")
	    (end-string "\\end{verbatim}"))
	(kill-region (region-beginning) (region-end))
	(insert start-string)
	(yank)
	(insert end-string))
    (print "you didn't highlight anything")))
#+end_src

* matching functions
#+begin_src emacs-lisp :tangle no
(defun matcherooney ()
  (interactive)
  (save-excursion
    (let ((match-list '("upper" "lower" "step" "time" "gravity" "position" "velocity"
			"acceleration" "correction_force" "setpoint" "position" "velocity"
			"acceleration" "correction_force" "running_error")))
      (dolist (match match-list)
	(save-excursion
	  (while (re-search-forward match nil t)
	    (replace-match (concat "self." match))))))))
#+end_src

* send to eshell
#+begin_src emacs-lisp :tangle no
;https://emacs.stackexchange.com/questions/7617/how-to-programmatically-execute-a-command-in-eshell
(with-current-buffer "*eshell*"
  (eshell-return-to-prompt)
  (insert "ls") ;<- insert stuff here
  (eshell-send-input)
  (eshell-next-prompt 1));this line doesn't seem to work
#+end_src

* dired+ 
  link: https://github.com/emacsmirror/emacswiki.org/blob/master/dired%2b.el
#+begin_src emacs-lisp :tangle yes
  (load-file "~/.emacs.d/dired+.el")
  (diredp-toggle-find-file-reuse-dir 1) ;https://emacs.stackexchange.com/questions/2445/dired-only-reuse-buffer-for-directories
  (customize-set-variable 'diredp-hide-details-initially-flag nil)
  (define-key dired-mode-map [mouse-1] 'diredp-find-file-reuse-dir-buffer)
  ;; (define-key dired-mode-map [down-mouse-1] 'dired-find-file)
  ;; (define-key dired-mode-map [up-mouse-1] 'dired-find-file)
  ;; (define-key dired-mode-map [mouse-2] 'dired-find-file)
  ; the following is found in:
  ; c:/Users/cbest/Documents/programming/kludge/emacs-26.2-i686/share/emacs/26.2/lisp/mouse.el
  ; on line 56
  (setq mouse-1-click-follows-link nil)
  ; you should, instead, try to change the behavior of long clicks
  ; instead of removing them
#+end_src
 
* windows python
  For some reason, I couldn't find the documentation for
  python-shell-exec-path, using counsel-describe-variable 'C-h v',
  until I ran python-mode
#+begin_src emacs-lisp :tangle yes
(setq python-shell-exec-path '("c:/Users/cbest/Documents/programming/Winpython/WPy32-3760/python-3.7.6/"))
#+end_src

* add to PATH
  link: https://emacs.stackexchange.com/questions/461/configuration-of-eshell-running-programs-from-directories-in-path-env-variable
#+begin_src emacs-lisp :tangle yes
(add-to-list 'exec-path "c:/Users/cbest/Documents/programming/kludge/bin") ;; doesn't work?
#+end_src
* :dired:
** dired+
   link: https://github.com/emacsmirror/emacswiki.org/blob/master/dired%2b.el
 #+begin_src emacs-lisp :tangle yes
 (load-file "~/.emacs.d/misc-elisp/dired+.el")  
 (diredp-toggle-find-file-reuse-dir 1) ;https://emacs.stackexchange.com/questions/2445/dired-only-reuse-buffer-for-directories
 (customize-set-variable 'diredp-hide-details-initially-flag nil)
 (define-key dired-mode-map [mouse-1] 'diredp-find-file-reuse-dir-buffer)
 ; on line 56 of mouse.el
 (setq mouse-1-click-follows-link nil)
 #+end_src
 
* scrolling
  link: https://www.emacswiki.org/emacs/SmoothScrolling
#+begin_src emacs-lisp :tangle yes
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
#+end_src

* bell
  https://emacs.stackexchange.com/questions/28906/how-to-switch-off-the-sounds
#+begin_src emacs-lisp :tangle yes
(setq ring-bell-function 'ignore)
#+end_src

* list diffing
  TODO list which list each element came from
#+begin_src emacs-lisp :tangle no
(defun same-lists (list1 list2)
  "Insert the atoms/lists that are common to each list."
  (let ((same-list nil))
    (dolist (element1 list1)
      (dolist (element2 list2)
	(if (eq element1 element2)
	    (catch 'err
	      ;; check if same-list contains element1
	      (dolist (same same-list)
		(if (eq same element1)
		    (throw 'err t)))
	      (setq same-list (cons element1 same-list))))))
    same-list))

(defun diff-lists (list1 list2)
  "Insert the atoms/lists that are not common to each list."
  (let ((diff-list nil)
	(same-list (same-lists list1 list2))
	(master-list (append list1 list2)))
    (dolist (element master-list)
	(catch 'match-found
	  ;; check for match in an list
	  (dolist (element-same same-list)
	    (if (eq element element-same)
		(throw 'match-found nil)))
	  (setq diff-list (cons element diff-list))))
    diff-list))

(insert (concat "\n; => " (format "%S" (diff-lists '(1 2 1 4 37 36) '(36 1 4))) "\n"))
; => (37 2)
(insert (concat "\n; => " (format "%S" (diff-lists package-selected-packages package-list)) "\n"))
; => (helm ivy evil ivy-explorer ivy-rich go-mode origami hy-mode jedi company)
#+end_src

* org-agenda
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files '("/home/craig/Documents/notes/macro.org"))
#+end_src
* god-mode & god-state
  https://github.com/gridaphobe/evil-god-state
#+begin_src emacs-lisp :tangle yes
(evil-define-key 'normal global-map "," 'evil-execute-in-god-state)
(evil-define-key 'god global-map [escape] 'evil-god-state-bail)
#+end_src
* org-babel
  <2020-09-05 Sat>
  https://orgmode.org/worg/org-contrib/babel/languages.html#configure
  bash source blocks https://stackoverflow.com/questions/29163164/how-can-i-load-bash-as-opposed-to-sh-in-org-babel-to-enable-begin-src-bash
#+begin_src emacs-lisp :tangle yes
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t))) ;this allows bash to be run in babel src blocks
#+end_src
